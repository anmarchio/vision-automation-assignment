[
    {
        "id": "37a5c325cf9b0143",
        "type": "tab",
        "label": "XML and OPC UA Communication",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1f78ec6ff4cc1d75",
        "type": "file in",
        "z": "37a5c325cf9b0143",
        "name": "Read 4.xml",
        "filename": "filepath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "allProps": false,
        "x": 450,
        "y": 140,
        "wires": [
            [
                "50edc58fa51098f5"
            ]
        ]
    },
    {
        "id": "50edc58fa51098f5",
        "type": "xml",
        "z": "37a5c325cf9b0143",
        "name": "Parse XML",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "16b8dff922d4cc24"
            ]
        ]
    },
    {
        "id": "16b8dff922d4cc24",
        "type": "function",
        "z": "37a5c325cf9b0143",
        "name": "Extract Fault and Severity",
        "func": "let faultsList = msg.payload?.ProcessData?.Results[0]?.UpView[0]?.FaultsList || [];\n\n// Extract severity and type from each fault\nlet faultData = faultsList.map(fault => ({\n    severity: fault.Fault[0].Severity[0],\n    type: fault.Fault[0].Type[0]\n}));\n\nmsg.payload = faultData;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "71a66349c29ea9dc"
            ]
        ]
    },
    {
        "id": "7c9299b31c0bc5e8",
        "type": "debug",
        "z": "37a5c325cf9b0143",
        "name": "Success Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 140,
        "wires": []
    },
    {
        "id": "fa63dd2c4b163233",
        "type": "catch",
        "z": "37a5c325cf9b0143",
        "name": "Catch Errors",
        "scope": null,
        "uncaught": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "9cc31b12589e0e34"
            ]
        ]
    },
    {
        "id": "9cc31b12589e0e34",
        "type": "debug",
        "z": "37a5c325cf9b0143",
        "name": "Log Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 240,
        "wires": []
    },
    {
        "id": "2c03f15d175cc74f",
        "type": "status",
        "z": "37a5c325cf9b0143",
        "name": "Monitor OPC UA Connection",
        "scope": [
            "71a66349c29ea9dc"
        ],
        "x": 160,
        "y": 340,
        "wires": [
            [
                "49098a0663edbd2f"
            ]
        ]
    },
    {
        "id": "49098a0663edbd2f",
        "type": "function",
        "z": "37a5c325cf9b0143",
        "name": "Reconnection Logic",
        "func": "if (msg.status.text === 'disconnected') {\n    node.warn('Reconnecting to OPC UA server...');\n    // Reconnection logic if applicable\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "696c03f059fa76f8",
        "type": "inject",
        "z": "37a5c325cf9b0143",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "e66ab70cc5bc4088"
            ]
        ]
    },
    {
        "id": "fb998448e151632c",
        "type": "comment",
        "z": "37a5c325cf9b0143",
        "name": "Task 3: OPC UA",
        "info": "",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "e66ab70cc5bc4088",
        "type": "function",
        "z": "37a5c325cf9b0143",
        "name": "4.xml path",
        "func": "let rootPath = env.get(\"ROOT_PATH\");\nmsg.filepath = rootPath + \"\\\\4.xml\" \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "1f78ec6ff4cc1d75"
            ]
        ]
    },
    {
        "id": "71a66349c29ea9dc",
        "type": "OpcUa-Client2-Write",
        "z": "37a5c325cf9b0143",
        "inputs": 1,
        "output": 4,
        "name": "OPC UA Write",
        "endpoint": "d5243af7c16fdf26",
        "attributeId": "Value",
        "nodeId": "",
        "x": 1100,
        "y": 140,
        "wires": [
            [
                "7c9299b31c0bc5e8"
            ]
        ]
    },
    {
        "id": "d5243af7c16fdf26",
        "type": "OpcUa-Endpoint2",
        "name": "OPC UA Sterfive",
        "endpoint": "opc.tcp://opcuademo.sterfive.com:26543/UA/SampleServer",
        "securityMode": "None",
        "securityPolicy": "None",
        "userIdentityType": "Anonymous",
        "pkiName": "",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "subscriptions": [
            {
                "id": "s0",
                "name": "Default Subscription",
                "isDefault": true,
                "parameters": {
                    "publishingEnabled": true,
                    "requestedLifetimeCount": "1000",
                    "requestedMaxKeepAliveCount": "10",
                    "requestedPublishingInterval": "1000",
                    "maxNotificationsPerPublish": "0",
                    "priority": "100"
                }
            },
            {
                "id": "s1",
                "name": "Slow Subscription",
                "isDefault": true,
                "parameters": {
                    "publishingEnabled": true,
                    "requestedLifetimeCount": "100",
                    "requestedMaxKeepAliveCount": "3",
                    "requestedPublishingInterval": "5000",
                    "maxNotificationsPerPublish": "100",
                    "priority": "10"
                }
            },
            {
                "id": "s2",
                "name": "Fast Subscription",
                "isDefault": true,
                "parameters": {
                    "publishingEnabled": true,
                    "requestedLifetimeCount": "4000",
                    "requestedMaxKeepAliveCount": "50",
                    "requestedPublishingInterval": "250",
                    "maxNotificationsPerPublish": "100",
                    "priority": "200"
                }
            }
        ],
        "namespaceAliases": [
            {
                "namespaceUri": "http://opcfoundation.org/UA/",
                "alias": "ua"
            },
            {
                "namespaceUri": "http://opcfoundation.org/DI/",
                "alias": "di"
            }
        ]
    }
]